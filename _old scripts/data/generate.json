[
  {
    "intent": "generate",
    "instruction": "Build a Deep Q-Network (DQN) architecture with one input, two hidden layers (3 and 2 neurons), and one output Q-value node labeled Q(s, a). Connect fully between layers.",
    "xml": "<mxfile><diagram name=\"DQN Architecture\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input State\" style=\"ellipse;fillColor=#DAE8FC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"30\" y=\"100\" width=\"100\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"h1-1\" value=\"H1-1\" style=\"ellipse\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"40\" width=\"60\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"h1-2\" value=\"H1-2\" style=\"ellipse\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"100\" width=\"60\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"h1-3\" value=\"H1-3\" style=\"ellipse\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"160\" width=\"60\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"h2-1\" value=\"H2-1\" style=\"ellipse\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"260\" y=\"80\" width=\"60\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"h2-2\" value=\"H2-2\" style=\"ellipse\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"260\" y=\"150\" width=\"60\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Q(s,a)\" style=\"ellipse;fillColor=#D5E8D4;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"360\" y=\"110\" width=\"90\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"input\" target=\"h1-1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"input\" target=\"h1-2\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"input\" target=\"h1-3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"h1-1\" target=\"h2-1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"h1-2\" target=\"h2-1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"h1-3\" target=\"h2-2\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e7\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"h2-1\" target=\"output\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e8\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"h2-2\" target=\"output\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create a simple CNN architecture for image classification. Include an Input Image node, a sequence of Convolution, Pooling, Flatten, Dense, and Output layers. Connect each layer in order.",
    "xml": "<mxfile><diagram name=\"CNN Architecture\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input Image\" style=\"rectangle;fillColor=#E1D5E7;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"30\" y=\"100\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv\" value=\"Conv Layer\" style=\"rectangle;fillColor=#DAE8FC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"190\" y=\"100\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"pool\" value=\"Pooling Layer\" style=\"rectangle;fillColor=#DAE8FC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"320\" y=\"100\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"flatten\" value=\"Flatten\" style=\"rectangle;fillColor=#FFF2CC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"450\" y=\"100\" width=\"100\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"dense\" value=\"Dense Layer\" style=\"rectangle;fillColor=#D5E8D4;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"570\" y=\"100\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Class Probabilities\" style=\"ellipse;fillColor=#90EE90;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"710\" y=\"100\" width=\"140\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"input\" target=\"conv\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"conv\" target=\"pool\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"pool\" target=\"flatten\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"flatten\" target=\"dense\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"dense\" target=\"output\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Design an Actor-Critic diagram in Reinforcement Learning. Include an Environment, an Agent split into two components: Actor and Critic. Draw arrows showing: Environment → State to both Actor and Critic, Actor → Action to Environment, Environment → Reward to Critic, Critic → Evaluation to Actor.",
    "xml": "<mxfile><diagram name=\"Actor-Critic RL Model\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"env\" value=\"Environment\" style=\"rectangle;fillColor=#DAE8FC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"50\" y=\"140\" width=\"140\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"actor\" value=\"Actor\" style=\"rectangle;fillColor=#E1D5E7;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"240\" y=\"80\" width=\"100\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"critic\" value=\"Critic\" style=\"rectangle;fillColor=#FFF2CC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"240\" y=\"180\" width=\"100\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" value=\"State\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"env\" target=\"actor\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" value=\"State\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"env\" target=\"critic\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" value=\"Action\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"actor\" target=\"env\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" value=\"Reward\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"env\" target=\"critic\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" value=\"Evaluation\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"critic\" target=\"actor\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Design a neural network architecture with a shared feature extractor. The shared branch should include two Convolution + ReLU layers. After that, split into two heads: one for classification (dense layer and softmax), and one for regression (dense layer and linear output). Make sure both heads connect to the shared feature extractor.",
    "xml": "<mxfile><diagram name=\"Shared Feature Extractor\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input Image\" style=\"rectangle;fillColor=#DAE8FC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"140\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv1\" value=\"Conv2D + ReLU\" style=\"rectangle;fillColor=#E1D5E7;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"200\" y=\"120\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv2\" value=\"Conv2D + ReLU\" style=\"rectangle;fillColor=#E1D5E7;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"370\" y=\"120\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"dense_cls\" value=\"Dense + Softmax (Classification)\" style=\"rectangle;fillColor=#D5E8D4;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"540\" y=\"60\" width=\"200\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"dense_reg\" value=\"Dense + Linear (Regression)\" style=\"rectangle;fillColor=#FFF2CC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"540\" y=\"180\" width=\"200\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"input\" target=\"conv1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"conv1\" target=\"conv2\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"conv2\" target=\"dense_cls\"><mxGeometry relative=\"1\" as=\"geometry\"><mxPoint x=\"510\" y=\"145\" as=\"sourcePoint\"/><mxPoint x=\"540\" y=\"75\" as=\"targetPoint\"/></mxGeometry></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"conv2\" target=\"dense_reg\"><mxGeometry relative=\"1\" as=\"geometry\"><mxPoint x=\"510\" y=\"145\" as=\"sourcePoint\"/><mxPoint x=\"540\" y=\"205\" as=\"targetPoint\"/></mxGeometry></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create a ResNet-like residual block used in ResNet10. It should include two Conv2D layers with ReLU activation, a skip connection from the block input to its output, and a final ReLU activation applied to the sum.",
    "xml": "<mxfile><diagram name=\"ResNet Block\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input Tensor\" style=\"rectangle;fillColor=#DAE8FC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"140\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv1\" value=\"Conv2D + ReLU\" style=\"rectangle;fillColor=#E1D5E7;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"200\" y=\"100\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv2\" value=\"Conv2D\" style=\"rectangle;fillColor=#E1D5E7;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"370\" y=\"100\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"add\" value=\"Add (Skip + Output)\" style=\"rectangle;fillColor=#FFF2CC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"530\" y=\"130\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"relu\" value=\"ReLU Activation\" style=\"rectangle;fillColor=#D5E8D4;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"690\" y=\"130\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"skip\" style=\"endArrow=block;dashed=1;\" edge=\"1\" parent=\"1\" source=\"input\" target=\"add\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"input\" target=\"conv1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"conv1\" target=\"conv2\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"conv2\" target=\"add\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"add\" target=\"relu\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Generate a diagram of a Siamese Network for image similarity. Include two images as inputs passed through shared CNN layers, then connect both to a distance function (like L2). Use labeled arrows to indicate shared network processing.",
    "xml": "<mxfile><diagram name=\"Siamese Network\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"img1\" value=\"Image A\" style=\"rectangle;fillColor=#DAE8FC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"60\" width=\"100\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"img2\" value=\"Image B\" style=\"rectangle;fillColor=#DAE8FC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"180\" width=\"100\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"cnn1\" value=\"Shared CNN\" style=\"rectangle;fillColor=#E1D5E7;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"60\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"cnn2\" value=\"Shared CNN\" style=\"rectangle;fillColor=#E1D5E7;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"180\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"distance\" value=\"L2 Distance\" style=\"rectangle;fillColor=#FFF2CC;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"340\" y=\"120\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"out\" value=\"Similarity Score\" style=\"ellipse;fillColor=#D5E8D4;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"500\" y=\"120\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"img1\" target=\"cnn1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"img2\" target=\"cnn2\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"cnn1\" target=\"distance\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"cnn2\" target=\"distance\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"distance\" target=\"out\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Design a ResNet-style architecture with four stages, each showing bottleneck blocks like 1x1→3x3→1x1 + skip. Use swimlanes to group blocks and finish with Average Pooling and Fully Connected outputs.",
    "xml": "<mxfile><diagram name=\"ResNet\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"2\" value=\"Input Image\" style=\"rounded=0;whiteSpace=wrap;html=1;fillColor=#E1D5E7;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"200\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"Conv7x7 + MaxPool\" style=\"rounded=0;whiteSpace=wrap;html=1;fillColor=#CDEB8B;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"200\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"stage1\" value=\"Stage 1 (3 Bottleneck Blocks)\" style=\"swimlane;fillColor=#F8CECC;swimlaneLine=0;html=1;rounded=0;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"340\" y=\"120\" width=\"180\" height=\"200\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"1x1 → 3x3 → 1x1 + skip\" style=\"rounded=0;fillColor=white;html=1;\" vertex=\"1\" parent=\"stage1\"><mxGeometry x=\"10\" y=\"50\" width=\"160\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"5\" value=\"1x1 → 3x3 → 1x1 + skip\" style=\"rounded=0;fillColor=white;html=1;\" vertex=\"1\" parent=\"stage1\"><mxGeometry x=\"10\" y=\"90\" width=\"160\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"6\" value=\"1x1 → 3x3 → 1x1 + skip\" style=\"rounded=0;fillColor=white;html=1;\" vertex=\"1\" parent=\"stage1\"><mxGeometry x=\"10\" y=\"130\" width=\"160\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"stage2\" value=\"Stage 2 (4 Bottleneck Blocks)\" style=\"swimlane;fillColor=#DAE8FC;swimlaneLine=0;html=1;rounded=0;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"540\" y=\"120\" width=\"220\" height=\"200\" as=\"geometry\"/></mxCell><mxCell id=\"7\" value=\"1x1 → 3x3 → 1x1 + skip\" style=\"rounded=0;fillColor=white;html=1;\" vertex=\"1\" parent=\"stage2\"><mxGeometry x=\"10\" y=\"30\" width=\"200\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"8\" value=\"1x1 → 3x3 → 1x1 + skip\" style=\"rounded=0;fillColor=white;html=1;\" vertex=\"1\" parent=\"stage2\"><mxGeometry x=\"10\" y=\"70\" width=\"200\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"9\" value=\"1x1 → 3x3 → 1x1 + skip\" style=\"rounded=0;fillColor=white;html=1;\" vertex=\"1\" parent=\"stage2\"><mxGeometry x=\"10\" y=\"110\" width=\"200\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"10\" value=\"1x1 → 3x3 → 1x1 + skip\" style=\"rounded=0;fillColor=white;html=1;\" vertex=\"1\" parent=\"stage2\"><mxGeometry x=\"10\" y=\"150\" width=\"200\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"stage3\" value=\"Stage 3 (2 Bottleneck Blocks)\" style=\"swimlane;fillColor=#D5E8D4;swimlaneLine=0;html=1;rounded=0;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"780\" y=\"140\" width=\"180\" height=\"170\" as=\"geometry\"/></mxCell><mxCell id=\"11\" value=\"1x1 → 3x3 → 1x1 + skip\" style=\"rounded=0;fillColor=white;html=1;\" vertex=\"1\" parent=\"stage3\"><mxGeometry x=\"10\" y=\"40\" width=\"160\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"12\" value=\"1x1 → 3x3 → 1x1 + skip\" style=\"rounded=0;fillColor=white;html=1;\" vertex=\"1\" parent=\"stage3\"><mxGeometry x=\"10\" y=\"90\" width=\"160\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"avgpool\" value=\"Avg Pooling\" style=\"rounded=0;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"980\" y=\"190\" width=\"120\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"fc\" value=\"FC → 1000 Classes\" style=\"rounded=0;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"1120\" y=\"190\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block;html=1;\" edge=\"1\" source=\"2\" target=\"3\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block;html=1;\" edge=\"1\" source=\"3\" target=\"stage1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block;html=1;\" edge=\"1\" source=\"stage1\" target=\"stage2\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block;html=1;\" edge=\"1\" source=\"stage2\" target=\"stage3\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block;html=1;\" edge=\"1\" source=\"stage3\" target=\"avgpool\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" style=\"endArrow=block;html=1;\" edge=\"1\" source=\"avgpool\" target=\"fc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create a multi-task CNN architecture showing a shared feature extractor made of Conv1 → Conv2 + Pool → Conv3, followed by three independent heads: classification (Dense + Softmax), regression (Dense + Linear), and segmentation (Upsample + Pixelwise Softmax). The output boxes should be wide and spaced to fit full labels.",
    "xml": "<mxfile><diagram name=\"Multi-Task CNN Diagram\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input Image\" style=\"rounded=0;fillColor=#FFFFFF;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"200\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"shared\" value=\"Shared Feature Extractor\" style=\"swimlane;fillColor=#F5F5F5;rounded=1;html=1;swimlaneLine=0;fontSize=12;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"190\" y=\"160\" width=\"480\" height=\"150\" as=\"geometry\"/></mxCell><mxCell id=\"conv1\" value=\"Conv1\\nReLU\" style=\"rectangle;fillColor=#DAE8FC;rounded=0;html=1;\" vertex=\"1\" parent=\"shared\"><mxGeometry x=\"10\" y=\"50\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv2\" value=\"Conv2\\nReLU + Pool\" style=\"rectangle;fillColor=#DAE8FC;rounded=0;html=1;\" vertex=\"1\" parent=\"shared\"><mxGeometry x=\"140\" y=\"50\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv3\" value=\"Conv3\\nReLU\" style=\"rectangle;fillColor=#DAE8FC;rounded=0;html=1;\" vertex=\"1\" parent=\"shared\"><mxGeometry x=\"300\" y=\"50\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"cls\" value=\"Dense + ReLU\\n→ Softmax\\n(Classification)\" style=\"rectangle;fillColor=#CDEB8B;rounded=0;html=1;whiteSpace=wrap;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"700\" y=\"100\" width=\"250\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"reg\" value=\"Dense + ReLU\\n→ Linear\\n(Regression)\" style=\"rectangle;fillColor=#FFF2CC;rounded=0;html=1;whiteSpace=wrap;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"700\" y=\"200\" width=\"250\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"seg\" value=\"Upsample + Conv\\n→ Pixelwise Softmax\\n(Segmentation)\" style=\"rectangle;fillColor=#F8CECC;rounded=0;html=1;whiteSpace=wrap;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"700\" y=\"300\" width=\"250\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block;html=1;\" edge=\"1\" parent=\"1\" source=\"input\" target=\"conv1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block;html=1;\" edge=\"1\" parent=\"1\" source=\"conv1\" target=\"conv2\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block;html=1;\" edge=\"1\" parent=\"1\" source=\"conv2\" target=\"conv3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block;exitX=1;exitY=0.2;entryX=0;entryY=0.5;html=1;\" edge=\"1\" parent=\"1\" source=\"conv3\" target=\"cls\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block;exitX=1;exitY=0.5;entryX=0;entryY=0.5;html=1;\" edge=\"1\" parent=\"1\" source=\"conv3\" target=\"reg\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" style=\"endArrow=block;exitX=1;exitY=0.8;entryX=0;entryY=0.5;html=1;\" edge=\"1\" parent=\"1\" source=\"conv3\" target=\"seg\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Design a YOLO-style object detection model. Include a backbone (Conv + ReLU), neck (FPN + PAN), and head (3 detection layers for different scales). Use grouped boxes and connect them sequentially. Make sure detection layers are placed at different vertical offsets and clearly labeled.",
    "xml": "<mxfile><diagram name=\"YOLO Model\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input Image\" style=\"rounded=0;fillColor=#FFFFFF;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"180\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"backbone\" value=\"Backbone\\nConv Layers + ReLU\" style=\"rectangle;fillColor=#DAE8FC;html=1;rounded=0;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"180\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"neck\" value=\"Neck\\nFPN + PAN\" style=\"rectangle;fillColor=#DAF0D3;html=1;rounded=0;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"380\" y=\"180\" width=\"160\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"det1\" value=\"Detect Small\\n(Scale 1)\" style=\"rectangle;fillColor=#FFF2CC;html=1;rounded=0;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"580\" y=\"100\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"det2\" value=\"Detect Medium\\n(Scale 2)\" style=\"rectangle;fillColor=#FFF2CC;html=1;rounded=0;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"580\" y=\"180\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"det3\" value=\"Detect Large\\n(Scale 3)\" style=\"rectangle;fillColor=#FFF2CC;html=1;rounded=0;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"580\" y=\"260\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"input\" target=\"backbone\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"backbone\" target=\"neck\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block;exitX=1;exitY=0.3;entryX=0;entryY=0.5;html=1;\" edge=\"1\" source=\"neck\" target=\"det1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block;exitX=1;exitY=0.5;entryX=0;entryY=0.5;html=1;\" edge=\"1\" source=\"neck\" target=\"det2\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block;exitX=1;exitY=0.7;entryX=0;entryY=0.5;html=1;\" edge=\"1\" source=\"neck\" target=\"det3\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Model a basic Generative Adversarial Network (GAN). Include a Generator that receives noise input and outputs a fake image. The Discriminator should receive both real and fake images and output Real vs Fake. Use colored arrows to visualize the two paths.",
    "xml": "<mxfile><diagram name=\"GAN Diagram\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"noise\" value=\"Noise Vector\" style=\"rounded=0;fillColor=#FFFFFF;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"180\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"gen\" value=\"Generator\\n(Dense + ReLU + Upsample)\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"200\" y=\"180\" width=\"220\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"fake\" value=\"Fake Image\" style=\"rounded=0;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"430\" y=\"180\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"real\" value=\"Real Image\" style=\"rounded=0;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"430\" y=\"290\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"disc\" value=\"Discriminator\\n(Conv + ReLU + FC)\" style=\"rounded=0;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"590\" y=\"230\" width=\"200\" height=\"80\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"noise\" target=\"gen\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"gen\" target=\"fake\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"fake\" target=\"disc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"real\" target=\"disc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Design a ViT inference pipeline with patching, linear projection, positional encoding, encoder blocks, CLS token extraction, and MLP head. Use multiline labels and center layout.",
    "xml": "<mxfile><diagram name=\"ViT\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input Image\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"160\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"patch\" value=\"Patch Split&#xa;(16x16)\" style=\"rounded=0;fillColor=#FFFFFF;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"160\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"proj\" value=\"Linear&#xa;Projection\" style=\"rounded=0;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"330\" y=\"160\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"pos\" value=\"+ Positional&#xa;Encoding\" style=\"rounded=0;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"480\" y=\"160\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"encoder\" value=\"Transformer&#xa;Encoder Blocks\" style=\"rounded=0;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"640\" y=\"160\" width=\"170\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"cls\" value=\"[CLS] Token&#xa;Extraction\" style=\"ellipse;fillColor=#FFCCFF;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"830\" y=\"170\" width=\"100\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"mlp\" value=\"MLP Head&#xa;+ Softmax\" style=\"rounded=0;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"950\" y=\"170\" width=\"140\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" edge=\"1\" parent=\"1\" source=\"input\" target=\"patch\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" edge=\"1\" parent=\"1\" source=\"patch\" target=\"proj\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" edge=\"1\" parent=\"1\" source=\"proj\" target=\"pos\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" edge=\"1\" parent=\"1\" source=\"pos\" target=\"encoder\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" edge=\"1\" parent=\"1\" source=\"encoder\" target=\"cls\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" edge=\"1\" parent=\"1\" source=\"cls\" target=\"mlp\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Model a UNet++ architecture with multiple encoders, bottleneck, and nested decoder paths using skip connections. Show Conv + ReLU in encoder and upsample + concat in decoder.",
    "xml": "<mxfile><diagram name=\"UNet++\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input&#xa;Image\" style=\"rounded=0;fillColor=#FFFFFF;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"20\" y=\"180\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"enc1\" value=\"Conv1&#xa;ReLU + Pool\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"160\" width=\"140\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"enc2\" value=\"Conv2&#xa;ReLU + Pool\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"320\" y=\"160\" width=\"140\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"bottleneck\" value=\"Conv3&#xa;ReLU\" style=\"rounded=0;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"480\" y=\"160\" width=\"140\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"dec1\" value=\"Upsample&#xa;+ Concat&#xa;+ Conv\" style=\"rounded=0;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"640\" y=\"160\" width=\"180\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Pixelwise&#xa;Softmax\" style=\"rounded=0;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"850\" y=\"180\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"skip\" style=\"endArrow=block;dashed=1;strokeColor=#999999;\" edge=\"1\" source=\"enc2\" target=\"dec1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"input\" target=\"enc1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"enc1\" target=\"enc2\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"enc2\" target=\"bottleneck\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"bottleneck\" target=\"dec1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" parent=\"1\" source=\"dec1\" target=\"output\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create a CLIP-style model with two encoders: one for image input (CNN) and one for text input (Transformer). Project them to a shared feature space and use cosine similarity at the end.",
    "xml": "<mxfile><diagram name=\"CLIP Model\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"img\" value=\"Image&#xa;Input\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"50\" y=\"100\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"txt\" value=\"Text&#xa;Input\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"50\" y=\"250\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"imgenc\" value=\"Image Encoder&#xa;(CNN)\" style=\"rectangle;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"200\" y=\"100\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"txtenc\" value=\"Text Encoder&#xa;(Transformer)\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"200\" y=\"250\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"fusion\" value=\"Shared&#xa;Embedding Space\" style=\"ellipse;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"410\" y=\"170\" width=\"160\" height=\"80\" as=\"geometry\"/></mxCell><mxCell id=\"sim\" value=\"Cosine&#xa;Similarity\" style=\"rounded=0;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"600\" y=\"190\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"img\" target=\"imgenc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"txt\" target=\"txtenc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"imgenc\" target=\"fusion\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"txtenc\" target=\"fusion\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"fusion\" target=\"sim\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Build a residual block from a ResNet architecture. Show the input passing through a sequence of Conv1x1, Conv3x3, Conv1x1, plus a skip connection merging into the output using an Add operation. Use multiline labels.",
    "xml": "<mxfile><diagram name=\"ResNet Block\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input&#xa;Tensor\" style=\"rounded=0;fillColor=#FFFFFF;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"160\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv1\" value=\"1x1 Conv&#xa;+ ReLU\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"160\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv2\" value=\"3x3 Conv&#xa;+ ReLU\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"320\" y=\"160\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"conv3\" value=\"1x1 Conv\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"460\" y=\"160\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"add\" value=\"Add&#xa;(Skip + Main)\" style=\"ellipse;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"600\" y=\"160\" width=\"100\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Output&#xa;Tensor\" style=\"rounded=0;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"720\" y=\"160\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"input\" target=\"conv1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"conv1\" target=\"conv2\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"conv2\" target=\"conv3\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"conv3\" target=\"add\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"skip\" style=\"endArrow=block;dashed=1;strokeColor=#999999;exitX=1;exitY=0.5;entryX=0;entryY=0.2;\" edge=\"1\" source=\"input\" target=\"add\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"add\" target=\"output\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create the starting structure of EfficientNet including stem Conv3x3, followed by a mobile inverted bottleneck (MBConv) block. MBConv should include expansion, depthwise conv, SE block, projection, and a skip connection.",
    "xml": "<mxfile><diagram name=\"EfficientNet\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input&#xa;Image\" style=\"rounded=0;fillColor=#FFFFFF;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"200\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"stem\" value=\"Stem&#xa;3x3 Conv\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"200\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"expand\" value=\"1x1 Conv&#xa;Expand\" style=\"rounded=0;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"320\" y=\"200\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"dwconv\" value=\"Depthwise&#xa;3x3 Conv\" style=\"rounded=0;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"460\" y=\"200\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"se\" value=\"Squeeze&#xa;and Excite\" style=\"ellipse;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"610\" y=\"200\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"project\" value=\"1x1 Conv&#xa;Project\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"740\" y=\"200\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"MBConv&#xa;Output\" style=\"rounded=0;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"880\" y=\"200\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"input\" target=\"stem\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"stem\" target=\"expand\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"expand\" target=\"dwconv\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"dwconv\" target=\"se\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"se\" target=\"project\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"skip\" style=\"endArrow=block;dashed=1;strokeColor=#999999;entryX=0;entryY=0.8;exitX=1;exitY=0.5;\" edge=\"1\" source=\"input\" target=\"project\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" style=\"endArrow=block\" edge=\"1\" source=\"project\" target=\"output\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Design an autoencoder with encoder, latent space, and decoder blocks. Include Conv + ReLU + Pool for encoding, fully-connected latent embedding, and upsample + ReLU for decoder. Separate layout horizontally with clean spacing.",
    "xml": "<mxfile><diagram name=\"Autoencoder\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input&#xa;Image\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"160\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"enc1\" value=\"Conv&#xa;+ ReLU + Pool\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"160\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"latent\" value=\"Latent&#xa;Embedding\" style=\"ellipse;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"360\" y=\"160\" width=\"120\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"dec1\" value=\"Upsample + ReLU\" style=\"rounded=0;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"500\" y=\"160\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Reconstructed&#xa;Image\" style=\"rounded=0;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"660\" y=\"160\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"input\" target=\"enc1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"enc1\" target=\"latent\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"latent\" target=\"dec1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"dec1\" target=\"output\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create an autoencoder architecture. Include an encoder block with Conv + ReLU + Pool, a latent embedding layer, and a decoder block with upsampling and ReLU. End with reconstruction output.",
    "xml": "<mxfile><diagram name=\"Autoencoder\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input&#xa;Image\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"160\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"encode\" value=\"Encoder&#xa;Conv + ReLU + Pool\" style=\"rounded=0;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"160\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"latent\" value=\"Latent&#xa;Embedding\" style=\"ellipse;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"360\" y=\"160\" width=\"120\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"decode\" value=\"Decoder&#xa;Upsample + ReLU\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"500\" y=\"160\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Reconstructed&#xa;Output\" style=\"rounded=0;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"680\" y=\"160\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"input\" target=\"encode\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"encode\" target=\"latent\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"latent\" target=\"decode\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"decode\" target=\"output\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create a reinforcement learning loop. Use blocks for Environment, Agent, Action, Reward, and State. Arrows should flow in a cyclic manner.",
    "xml": "<mxfile><diagram name=\"RL Loop\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"env\" value=\"Environment\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"100\" y=\"140\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"agent\" value=\"Agent\" style=\"rounded=0;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"400\" y=\"140\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"s\" value=\"State\" style=\"ellipse;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"100\" y=\"60\" width=\"100\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"a\" value=\"Action\" style=\"ellipse;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"260\" y=\"60\" width=\"100\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"r\" value=\"Reward\" style=\"ellipse;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"420\" y=\"60\" width=\"100\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"env\" target=\"s\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"s\" target=\"agent\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"agent\" target=\"a\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"a\" target=\"env\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"env\" target=\"r\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" style=\"endArrow=block\" edge=\"1\" source=\"r\" target=\"agent\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Design a dual encoder system for multimodal learning. The architecture should have an image encoder (CNN) and a text encoder (Transformer), projecting into a shared embedding space which connects to a task-specific head.",
    "xml": "<mxfile><diagram name=\"Multimodal Encoder\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"img_input\" value=\"Image&#xa;Input\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"100\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"text_input\" value=\"Text&#xa;Input\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"240\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"img_enc\" value=\"Image&#xa;Encoder (CNN)\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"100\" width=\"160\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"text_enc\" value=\"Text&#xa;Encoder (Transformer)\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"240\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"fuse\" value=\"Shared&#xa;Embedding Space\" style=\"ellipse;fillColor=#FFE6CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"390\" y=\"170\" width=\"160\" height=\"80\" as=\"geometry\"/></mxCell><mxCell id=\"head\" value=\"Task-Specific&#xa;Prediction Head\" style=\"rectangle;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"580\" y=\"180\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"img_input\" target=\"img_enc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"text_input\" target=\"text_enc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"img_enc\" target=\"fuse\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"text_enc\" target=\"fuse\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"fuse\" target=\"head\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create a monitoring system for ML models in production. Include inputs like predictions and logs, a metrics processor, drift detector, and a dashboard. Connect components meaningfully.",
    "xml": "<mxfile><diagram name=\"Monitoring Diagram\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"pred\" value=\"Model&#xa;Predictions\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"120\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"logs\" value=\"System&#xa;Logs\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"200\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"metrics\" value=\"Metrics&#xa;Processor\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"220\" y=\"120\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"drift\" value=\"Drift&#xa;Detector\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"220\" y=\"200\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"dash\" value=\"Monitoring&#xa;Dashboard\" style=\"rectangle;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"410\" y=\"160\" width=\"160\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"pred\" target=\"metrics\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"logs\" target=\"drift\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"metrics\" target=\"dash\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"drift\" target=\"dash\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Show an MLOps pipeline including data ingestion, preprocessing, training, versioning, deployment with CI/CD, and model monitoring. Use grouping and color coding for each stage.",
    "xml": "<mxfile><diagram name=\"MLOps Pipeline\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"raw_data\" value=\"Raw Data&#xa;(CSV, Images)\" style=\"rectangle;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"100\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"preprocess\" value=\"Preprocessing&#xa;ETL + Cleaning\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"210\" y=\"100\" width=\"160\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"train\" value=\"Model Training&#xa;+ HPO\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"390\" y=\"100\" width=\"160\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"registry\" value=\"Model Registry&#xa;(Version Control)\" style=\"rectangle;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"570\" y=\"100\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"deploy\" value=\"CI/CD + Deploy&#xa;to API or Edge\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"770\" y=\"100\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"monitor\" value=\"Monitoring&#xa;Drift, Latency, Accuracy\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"970\" y=\"100\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"raw_data\" target=\"preprocess\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"preprocess\" target=\"train\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"train\" target=\"registry\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"registry\" target=\"deploy\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"deploy\" target=\"monitor\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Model a decoder-only Transformer (GPT) with token input, embedding, positional encoding, multiple decoder blocks (each with causal attention), and a final softmax output for logits. Use vertical stacked layout with color-coded layers.",
    "xml": "<mxfile><diagram name=\"GPT Decoder\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"tokens\" value=\"Token&#xa;IDs\" style=\"rectangle;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"40\" width=\"120\" height=\"40\" as=\"geometry\"/></mxCell><mxCell id=\"embed\" value=\"Token&#xa;Embedding\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"90\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"posenc\" value=\"Positional&#xa;Encoding\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"150\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"block1\" value=\"Decoder Block x12&#xa;(Causal MHA&#xa;+ FeedForward)\" style=\"rectangle;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"220\" width=\"200\" height=\"80\" as=\"geometry\"/></mxCell><mxCell id=\"norm\" value=\"LayerNorm +&#xa;Linear Projection\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"320\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Softmax&#xa;Over Vocabulary\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"160\" y=\"400\" width=\"180\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"tokens\" target=\"embed\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"embed\" target=\"posenc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"posenc\" target=\"block1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"block1\" target=\"norm\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"norm\" target=\"output\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Design the YOLOv8 head structure. Include feature maps at 3 resolutions, each going through a conv block and forming Class, Objectness, and BBox regression branches. Group and label all parts clearly.",
    "xml": "<mxfile><diagram name=\"YOLOv8 Head\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"in1\" value=\"Feature Map&#xa;P3 (Small)\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"60\" y=\"80\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"in2\" value=\"Feature Map&#xa;P4 (Medium)\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"60\" y=\"180\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"in3\" value=\"Feature Map&#xa;P5 (Large)\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"60\" y=\"280\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"head\" value=\"YOLO Head&#xa;Conv Block\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"240\" y=\"160\" width=\"160\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"obj\" value=\"Objectness&#xa;Logits\" style=\"ellipse;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"420\" y=\"80\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"cls\" value=\"Class&#xa;Logits\" style=\"ellipse;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"420\" y=\"160\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"bbox\" value=\"BBox&#xa;Regressor\" style=\"ellipse;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"420\" y=\"240\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"in1\" target=\"head\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"in2\" target=\"head\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"in3\" target=\"head\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"head\" target=\"obj\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"head\" target=\"cls\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" style=\"endArrow=block\" edge=\"1\" source=\"head\" target=\"bbox\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Model an OpenCLIP-style architecture. Include a Vision Transformer as the image encoder, Transformer for text input, linear projection to a joint embedding space, and a temperature scaling before a contrastive loss.",
    "xml": "<mxfile><diagram name=\"OpenCLIP\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"image\" value=\"Image&#xa;Input\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"100\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"text\" value=\"Text&#xa;Input\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"260\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"vit\" value=\"Vision&#xa;Transformer\" style=\"rectangle;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"100\" width=\"170\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"txf\" value=\"Text&#xa;Transformer\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"260\" width=\"170\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"proj_img\" value=\"Linear&#xa;Projection\" style=\"rounded=0;fillColor=#FFE6CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"370\" y=\"100\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"proj_text\" value=\"Linear&#xa;Projection\" style=\"rounded=0;fillColor=#FFE6CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"370\" y=\"260\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"logit\" value=\"Logit Scaling &#xa;/ Temperature\" style=\"rectangle;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"530\" y=\"180\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"loss\" value=\"Contrastive&#xa;Loss\" style=\"ellipse;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"710\" y=\"180\" width=\"140\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"image\" target=\"vit\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"text\" target=\"txf\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"vit\" target=\"proj_img\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"txf\" target=\"proj_text\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"proj_img\" target=\"logit\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" style=\"endArrow=block\" edge=\"1\" source=\"proj_text\" target=\"logit\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e7\" style=\"endArrow=block\" edge=\"1\" source=\"logit\" target=\"loss\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create a multimodal model that fuses image and text. Include projected image features from a ViT, and text tokens via Transformer, merged in a fusion module, followed by a joint decoder or classifier.",
    "xml": "<mxfile><diagram name=\"Multimodal Fusion\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"img\" value=\"Image&#xa;Input\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"90\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"txt\" value=\"Text&#xa;Input\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"210\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"vit\" value=\"ViT&#xa;Image Encoder\" style=\"rectangle;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"200\" y=\"90\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"text_enc\" value=\"Text Encoder&#xa;(Transformer)\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"200\" y=\"210\" width=\"190\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"fusion\" value=\"Multimodal Fusion&#xa;(Token merging / Attention)\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"420\" y=\"150\" width=\"220\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"head\" value=\"Shared&#xa;Decoder / Classifier\" style=\"rectangle;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"680\" y=\"150\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" edge=\"1\" parent=\"1\" source=\"img\" target=\"vit\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" edge=\"1\" parent=\"1\" source=\"txt\" target=\"text_enc\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" edge=\"1\" parent=\"1\" source=\"vit\" target=\"fusion\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" edge=\"1\" parent=\"1\" source=\"text_enc\" target=\"fusion\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" edge=\"1\" parent=\"1\" source=\"fusion\" target=\"head\" style=\"endArrow=block\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create a SAM-style architecture. Include an image encoder, prompt encoder (points, boxes, masks), fusion layer, dynamic mask decoder, and prediction of mask logits. Use groups or blocks and display spatial components.",
    "xml": "<mxfile><diagram name=\"SAM Internals\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"img\" value=\"Image&#xa;Input\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"100\" width=\"130\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"prompt\" value=\"Prompt&#xa;Input (points / boxes)\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"220\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"img_enc\" value=\"Image&#xa;Encoder (ViT)\" style=\"rectangle;fillColor=#D5E8D4;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"200\" y=\"100\" width=\"170\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"prompt_enc\" value=\"Prompt&#xa;Encoder\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"220\" y=\"220\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"fusion\" value=\"Fusion&#xa;Encoder Output + Prompt\" style=\"rectangle;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"400\" y=\"150\" width=\"200\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"mask\" value=\"Dynamic Mask&#xa;Decoder (MLP)\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"630\" y=\"150\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Predicted&#xa;Mask Logits\" style=\"rectangle;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"830\" y=\"150\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"img\" target=\"img_enc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"prompt\" target=\"prompt_enc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"img_enc\" target=\"fusion\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"prompt_enc\" target=\"fusion\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"fusion\" target=\"mask\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" style=\"endArrow=block\" edge=\"1\" source=\"mask\" target=\"output\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Create a Mixture of Experts (MoE) Transformer block. Include input embedding, a gating network, multiple expert FFNs, token routing to top-k experts, merging, layer norm, and output.",
    "xml": "<mxfile><diagram name=\"MoE Transformer\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"input\" value=\"Input&#xa;Tokens\" style=\"rounded=0;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"200\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"embed\" value=\"Token&#xa;Embedding\" style=\"rectangle;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"200\" y=\"200\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"gate\" value=\"Gating&#xa;Network (Top-k)\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"370\" y=\"200\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"exp1\" value=\"Expert FFN 1\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"560\" y=\"100\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"exp2\" value=\"Expert FFN 2\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"560\" y=\"200\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"exp3\" value=\"Expert FFN 3\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"560\" y=\"300\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"merge\" value=\"Weighted Merge\" style=\"ellipse;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"700\" y=\"200\" width=\"140\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"norm\" value=\"Layer&#xa;Norm\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"860\" y=\"200\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"out\" value=\"Output Tokens\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"1000\" y=\"200\" width=\"160\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" edge=\"1\" style=\"endArrow=block;\" parent=\"1\" source=\"input\" target=\"embed\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" edge=\"1\" style=\"endArrow=block;\" parent=\"1\" source=\"embed\" target=\"gate\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" edge=\"1\" style=\"endArrow=block;dashed=1;\" parent=\"1\" source=\"gate\" target=\"exp1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" edge=\"1\" style=\"endArrow=block;dashed=1;\" parent=\"1\" source=\"gate\" target=\"exp2\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" edge=\"1\" style=\"endArrow=block;dashed=1;\" parent=\"1\" source=\"gate\" target=\"exp3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" edge=\"1\" style=\"endArrow=block;\" parent=\"1\" source=\"exp1\" target=\"merge\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e7\" edge=\"1\" style=\"endArrow=block;\" parent=\"1\" source=\"exp2\" target=\"merge\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e8\" edge=\"1\" style=\"endArrow=block;\" parent=\"1\" source=\"exp3\" target=\"merge\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e9\" edge=\"1\" style=\"endArrow=block;\" parent=\"1\" source=\"merge\" target=\"norm\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e10\" edge=\"1\" style=\"endArrow=block;\" parent=\"1\" source=\"norm\" target=\"out\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Model a Deep Q-Network (DQN). Include state input, feature extractor layers, FC layers for Q-value prediction for all actions, target network copy, and a training loop showing Q-target calculation from reward and next state.",
    "xml": "<mxfile><diagram name=\"DQN\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"state\" value=\"State Input&#xa;s&#8320;\" style=\"rectangle;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"180\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"extractor\" value=\"Feature Extractor&#xa;(CNN or Dense)\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"180\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"qvals\" value=\"Q-head&#xa;Q(s&#8320;, a₁)... Q(s&#8320;, aₙ)\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"380\" y=\"180\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"target\" value=\"Target Network&#xa;(Q') Copy\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"280\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"training\" value=\"Q-Learning Update&#xa;Q(s&#8320;,a) ← r + γ max Q'\" style=\"rectangle;fillColor=#CDEB8B;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"380\" y=\"280\" width=\"220\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" edge=\"1\" style=\"endArrow=block\" source=\"state\" target=\"extractor\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" edge=\"1\" style=\"endArrow=block\" source=\"extractor\" target=\"qvals\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" edge=\"1\" style=\"endArrow=block;dashed=1;\" source=\"extractor\" target=\"target\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" edge=\"1\" style=\"endArrow=block\" source=\"target\" target=\"training\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" edge=\"1\" style=\"endArrow=block\" source=\"qvals\" target=\"training\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Show a vision-language model with cross-modal attention. Include a vision encoder (ViT), text encoder (Transformer), a cross-attention block, and a jointly conditioned decoder. Use clear two-stream layout.",
    "xml": "<mxfile><diagram name=\"Vision Language Cross Attention\"><mxGraphModel><root><mxCell id=\"0\"/><mxCell id=\"1\" parent=\"0\"/><mxCell id=\"img\" value=\"Image&#xa;Input\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"30\" y=\"120\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"txt\" value=\"Text&#xa;Input\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"30\" y=\"260\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"imgenc\" value=\"Vision&#xa;Encoder (ViT)\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"120\" width=\"160\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"txtenc\" value=\"Text&#xa;Encoder (Transformer)\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"260\" width=\"180\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"cross\" value=\"Cross Attention&#xa;Image ↔ Text\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"380\" y=\"190\" width=\"220\" height=\"70\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Multimodal&#xa;Caption / Answer\" style=\"rectangle;fillColor=#E1D5E7;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"630\" y=\"210\" width=\"180\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" edge=\"1\" style=\"endArrow=block\" source=\"img\" target=\"imgenc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" edge=\"1\" style=\"endArrow=block\" source=\"txt\" target=\"txtenc\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" edge=\"1\" style=\"endArrow=block\" source=\"imgenc\" target=\"cross\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" edge=\"1\" style=\"endArrow=block\" source=\"txtenc\" target=\"cross\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" edge=\"1\" style=\"endArrow=block\" source=\"cross\" target=\"output\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  },
  {
    "intent": "generate",
    "instruction": "Build a UNet-based architecture designed for image translation. Include encoder with 3 conv+downsampling blocks, skip connections, a bottleneck, and a decoder with 3 conv+upsample blocks. Final output maps to new image domain.",
    "xml": "<mxfile><diagram name=\"UNet Translation\"><mxGraphModel><root><mxCell id=\"0\" /><mxCell id=\"1\" parent=\"0\" /><mxCell id=\"input\" value=\"Input&#xa;Image\" style=\"rectangle;fillColor=#DAE8FC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"40\" y=\"200\" width=\"120\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"enc1\" value=\"Conv + Downsample&#xa;(64 filters)\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"180\" y=\"180\" width=\"180\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"enc2\" value=\"Conv + Downsample&#xa;(128 filters)\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"380\" y=\"180\" width=\"180\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"enc3\" value=\"Conv + Downsample&#xa;(256 filters)\" style=\"rectangle;fillColor=#DAF0D3;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"580\" y=\"180\" width=\"180\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"bottleneck\" value=\"Bottleneck Block&#xa;(512 filters)\" style=\"rectangle;fillColor=#FFF2CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"780\" y=\"180\" width=\"200\" height=\"60\" as=\"geometry\"/></mxCell><mxCell id=\"dec1\" value=\"Upsample + Conv&#xa;(256 filters)\" style=\"rectangle;fillColor=#FFE6CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"1000\" y=\"160\" width=\"180\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"dec2\" value=\"Upsample + Conv&#xa;(128 filters)\" style=\"rectangle;fillColor=#FFE6CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"1200\" y=\"160\" width=\"180\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"dec3\" value=\"Upsample + Conv&#xa;(64 filters)\" style=\"rectangle;fillColor=#FFE6CC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"1400\" y=\"160\" width=\"180\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"output\" value=\"Output&#xa;Translated Image\" style=\"rectangle;fillColor=#F8CECC;html=1;\" vertex=\"1\" parent=\"1\"><mxGeometry x=\"1600\" y=\"180\" width=\"150\" height=\"50\" as=\"geometry\"/></mxCell><mxCell id=\"e1\" style=\"endArrow=block\" edge=\"1\" source=\"input\" target=\"enc1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e2\" style=\"endArrow=block\" edge=\"1\" source=\"enc1\" target=\"enc2\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e3\" style=\"endArrow=block\" edge=\"1\" source=\"enc2\" target=\"enc3\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e4\" style=\"endArrow=block\" edge=\"1\" source=\"enc3\" target=\"bottleneck\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e5\" style=\"endArrow=block\" edge=\"1\" source=\"bottleneck\" target=\"dec1\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e6\" style=\"endArrow=block\" edge=\"1\" source=\"dec1\" target=\"dec2\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e7\" style=\"endArrow=block\" edge=\"1\" source=\"dec2\" target=\"dec3\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell><mxCell id=\"e8\" style=\"endArrow=block\" edge=\"1\" source=\"dec3\" target=\"output\" parent=\"1\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root></mxGraphModel></diagram></mxfile>"
  }
]
